{"version":3,"sources":["store/blueQuote/selectors.ts","utils/request.ts","api/blueQuote.ts","api/apiSet.ts","store/blueQuote/actions.ts","api/average.ts","api/slippage.ts","store/blueQuote/index.ts","components/slippageLabel.tsx","components/priceLabel.tsx","components/quoteCard.tsx","components/averageBar.tsx","components/chart.tsx","components/behaviorModal.tsx","App.tsx","reportWebVitals.ts","store/index.ts","index.tsx"],"names":["selectors","state","blueQuote","quotes","average","slippage","request","axios","create","baseURL","timeout","headers","Accept","data","quoteApi","url","this","endsWith","query","get","params","id","body","post","put","delete","actions","groupBy","minutesAway","dispatch","Promise","resolve","reject","a","list","reduce","acc","value","_id","mutations","setQuotes","source","setQuotesBySource","setAverage","buy_price_slippage","sell_price_slippage","setQuoteSlippage","blueQuoteSlice","createSlice","name","initialState","reducers","action","payload","getSlippageColor","SlippageLabel","Typography","variant","color","toFixed","PriceLabel","price","QuoteCard","quote","onShowBehavior","Grid","item","xs","sm","Card","CardContent","sx","mb","Link","href","style","paddingLeft","split","container","spacing","component","buy_price","sell_price","CardActions","Button","size","onClick","AverageBar","Fragment","mt","display","average_buy_price","ml","average_sell_price","Divider","QuoteChart","primaryAxis","React","useMemo","getValue","datum","Date","createdAt","secondaryAxes","push","label","map","width","height","options","RANGES","BehaviorModal","open","onClose","useState","timeRange","setTimeRange","useDispatch","Dialog","minWidth","ToggleButtonGroup","exclusive","onChange","e","Object","keys","range","ToggleButton","App","useSelector","blueQuoteSelectors","cancelInterval","useRef","showModal","setShowModal","chartSource","setChartSource","handleShowModal","clearInterval","current","refreshData","blueQuoteActions","setUpInterval","setInterval","useEffect","CssBaseline","Container","maxWidth","entries","quotesBySource","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","blueQuoteReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4cca547d.chunk.js","sourcesContent":["import { RootState } from \"..\"\n\nexport const selectors = {\n  quotes: (state: RootState) => state.blueQuote.quotes,\n  average: (state: RootState) => state.blueQuote.average,\n  slippage: (state: RootState) => state.blueQuote.slippage\n}\n","import axios from \"axios\"\n\nconst request = axios.create({\n  baseURL: process.env.NODE_ENV === \"development\"\n    ? \"http://localhost:8080/api/\"\n    : \"https://full-stack-pluggy-assignment.herokuapp.com/api/\",\n  timeout: 30000,\n  headers: {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\"\n  },\n  data: {}\n})\n\nexport default request","import ApiSet from \"./apiSet\"\n\nexport interface Quote {\n  buy_price: number,\n  sell_price: number,\n  source: string,\n  createdAt: string\n}\n\ninterface GroupedQuote {\n  _id: string,\n  quotes: Omit<Quote, \"source\">[]\n}\n\nconst quoteApi = new ApiSet<Quote|GroupedQuote>(\"quotes\")\n\nexport default quoteApi","import request from \"../utils/request\"\n\nclass ApiSet<T, CreateBody = Omit<T, \"id\">, EditBody = Partial<CreateBody>> {\n  url: string\n  constructor(url: string) {\n    this.url = url + (url.endsWith('/') ? \"\" :\"/\")\n  }\n\n  list(query: any = null) {\n    return request.get<T[]>(this.url, {\n      params: query\n    })\n  }\n\n  detail(id: string, query: any = null) {\n    return request.get<T>(`${this.url}${id}`, {\n      params: query\n    })\n  }\n\n  create(body: CreateBody) {\n    return request.post(this.url, body)\n  }\n\n  edit(id: string, body: EditBody) {\n    return request.put(`${this.url}${id}`, body)\n  }\n\n  delete(id: string) {\n    return request.delete(`${this.url}${id}`)\n  }\n}\n\nexport default ApiSet\n","import { Dispatch } from '..'\nimport quoteApi from '../../api/blueQuote'\nimport { mutations } from '../blueQuote'\nimport { getPricesAverage } from '../../api/average'\nimport { getQuoteSlippage } from '../../api/slippage';\n\n\nexport const actions = {\n  getQuotes: (query = {groupBy: \"source\", minutesAway: 1440}) => (dispatch: Dispatch) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const {data} = await quoteApi.list(query)\n        const quotes = data.reduce((acc: any, value) => {\n          if (\"_id\" in value) {\n            //GroupedQuote\n            acc[value._id] = value.quotes\n          } else {\n            //process Quote if needed. (I think I won't need this for the challenge)\n          }\n          return acc\n        }, {})\n        dispatch(mutations.setQuotes(quotes))\n        resolve(quotes)\n      } catch (e) {\n        reject(e)\n      }\n    })\n  },\n  getQuotesBySource: (query: {source:string, minutesAway: number}) => (dispatch: Dispatch) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const { data } = await quoteApi.list({\n          source: query.source,\n          minutesAway: query.minutesAway\n        })\n        dispatch(mutations.setQuotesBySource({\n          source: query.source,\n          quotes: data\n        }))\n        resolve(data)\n      } catch (e) {\n        reject(e)\n      }\n    })\n  },\n  getAverage: () => (dispatch: Dispatch) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const { data } = await getPricesAverage()\n        dispatch(mutations.setAverage(data))\n        resolve(data)\n      } catch (e) {\n        reject(e)\n      }\n    })\n  },\n  getSlippage: () => (dispatch: Dispatch) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const {data} = await getQuoteSlippage()\n        const slippage = data.reduce((acc: any, value) => {\n          const {source, buy_price_slippage, sell_price_slippage} = value\n          acc[source] = {buy_price_slippage, sell_price_slippage}\n          return acc\n        }, {})\n        dispatch(mutations.setQuoteSlippage(slippage))\n        resolve(slippage)\n      } catch (e) {\n        reject(e)\n      }\n    })\n  },\n}\n","import request from \"../utils/request\"\n\nexport interface AveragePrice {\n  average_buy_price: number,\n  average_sell_price: number\n}\n\nexport function getPricesAverage() {\n  return request.get<AveragePrice>(\"average\")\n}","import request from \"../utils/request\"\n\nexport interface QuoteSlippage {\n  buy_price_slippage: number,\n  sell_price_slippage: number,\n  source: string\n}\n\nexport function getQuoteSlippage() {\n  return request.get<QuoteSlippage[]>(\"slippage\")\n}","import { createSlice, PayloadAction,  } from \"@reduxjs/toolkit\"\nimport { AveragePrice, } from '../../api/average'\nimport { QuoteSlippage } from '../../api/slippage';\nexport * from \"./selectors\"\nexport * from \"./actions\"\n\ninterface blueQuoteState {\n  quotes: {\n    [source: string]: any\n  },\n  average: AveragePrice | null,\n  slippage: {\n    [source: string]: Omit<QuoteSlippage, \"source\">\n  }\n}\n\nconst initialState: blueQuoteState = {\n  quotes: {},\n  average: null,\n  slippage: {}\n}\n\nconst blueQuoteSlice = createSlice({\n  name: \"blueQuote\",\n  initialState,\n  reducers: {\n    setQuotes: (state, action) => {\n      state.quotes = action.payload\n    },\n    setQuotesBySource: (state, action: PayloadAction<{source: string, quotes: any}>) => {\n      state.quotes[action.payload.source] = action.payload.quotes\n    },\n    setAverage: (state, action) => {\n      state.average = action.payload\n    },\n    setQuoteSlippage: (state, action) => {\n      state.slippage = action.payload\n    }\n  }\n})\n\nexport const mutations = blueQuoteSlice.actions\n\nexport default blueQuoteSlice.reducer\n\n","import React, { FC } from \"react\"\nimport Typography from '@mui/material/Typography';\n\nconst getSlippageColor = (slippage: number) => {\n  return slippage <= 0 ? \"success.light\" : \"error.light\"\n}\n\n\nconst SlippageLabel: FC<{ slippage: number }> = ({ slippage }) => {\n  return (\n    <Typography\n      variant=\"caption\"\n      color={getSlippageColor(slippage)}\n    >\n      {slippage.toFixed(2)}\n    </Typography>\n  )\n}\n\nexport default SlippageLabel\n\n","import React, { FC } from \"react\"\nimport Typography from \"@mui/material/Typography\"\n\nconst PriceLabel: FC<{ price: number }> = ({ price }) =>\n  <Typography variant=\"body1\">\n    ${price.toFixed(2)}\n  </Typography>\n\nexport default PriceLabel\n","import React, {FC} from \"react\"\nimport Card from \"@mui/material/Card\"\nimport CardContent from \"@mui/material/CardContent\"\nimport CardActions from '@mui/material/CardActions';\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid'\nimport Typography from '@mui/material/Typography';\nimport Link from '@mui/material/Link'\nimport { Quote } from '../api/blueQuote';\nimport { QuoteSlippage } from '../api/slippage';\nimport SlippageLabel from \"./slippageLabel\";\nimport PriceLabel from \"./priceLabel\";\n\n\nconst QuoteCard: FC<{\n  quote: Quote,\n  slippage: Omit<QuoteSlippage, \"source\">,\n  onShowBehavior: Function\n}> =\n  ({ quote, slippage, onShowBehavior }) => {\n    return (\n      <Grid item xs={12} sm={6} >\n        <Card variant=\"outlined\">\n          <CardContent>\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{mb: 2}}>\n              Source:\n              <Link href={quote.source} style={{paddingLeft: 4}}>{quote.source.split(\"//\")[1].split(\"/\")[0]}</Link>\n            </Typography>\n            <Grid container spacing={1} >\n              <Grid item xs={6}>\n                <Typography variant=\"h4\" component=\"div\">\n                  Buy\n                </Typography>\n                <PriceLabel price={quote.buy_price} />\n                {slippage && <SlippageLabel slippage={slippage.buy_price_slippage} />}\n                \n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"h4\" component=\"div\">\n                  Sell\n                </Typography>\n                <PriceLabel price={quote.sell_price} />\n                {slippage && <SlippageLabel slippage={slippage.sell_price_slippage} />}\n              </Grid>\n            </Grid>\n          </CardContent>\n          <CardActions>\n            <Button\n              size=\"small\"\n              onClick={() => onShowBehavior(quote.source)}\n            >\n              Show behavior\n            </Button>\n          </CardActions>\n        </Card>\n      </Grid>\n    )\n}\n\nexport default QuoteCard","import React, {FC} from \"react\"\nimport Typography from '@mui/material/Typography'\nimport Divider from '@mui/material/Divider';\nimport { AveragePrice } from '../api/average';\n\nconst AverageBar: FC<{average:AveragePrice|null}> =  ({average}) => {\n  return (\n    <React.Fragment>\n      <Typography variant=\"h4\" sx={{mt: 3}}>\n        Average\n      </Typography>\n      <Typography variant=\"h5\" sx={{display: \"inline-block\"}}>\n        Buy: ${average?.average_buy_price.toFixed(2)}\n      </Typography>\n      <Typography variant=\"h5\" sx={{display: \"inline-block\", ml: 2}}>\n        Sell: ${average?.average_sell_price.toFixed(2)}\n      </Typography>\n      <Divider sx={{mt: 1.5, mb: 5}}/>\n    </React.Fragment>\n  )\n}\n\nexport default AverageBar","import React, { FC } from \"react\"\nimport { AxisOptions, Chart } from \"react-charts\"\nimport { Quote } from '../api/blueQuote';\n\nconst QuoteChart: FC<{quotes: Omit<Quote, \"source\">[]}> = ({quotes}) => {\n  const primaryAxis = React.useMemo<\n    AxisOptions<{createdAt: string, price: number}>\n  >(\n    () => ({\n      getValue: (datum) => new Date(datum.createdAt),\n    }),\n    []\n  );\n\n  const secondaryAxes = React.useMemo<\n    AxisOptions<{createdAt: string, price: number}>[]\n  >(\n    () => [\n      {\n        getValue: (datum) => datum.price,\n      },\n    ],\n    []\n  )\n\n  const data = []\n  data.push({\n    label: \"Buy\",\n    data: quotes.map(quote => ({\n      price: quote.buy_price,\n      createdAt: quote.createdAt\n    }))\n  })\n  data.push({\n    label: \"Sell\",\n    data: quotes.map(quote => ({\n      price: quote.sell_price,\n      createdAt: quote.createdAt\n    }))\n  })\n  return (\n    <div style={{ width: \"100%\", height: 400 }}>\n      <Chart\n        options={{\n          data,\n          primaryAxis,\n          secondaryAxes,\n        }}\n      />\n    </div>\n)\n}\n\nexport default QuoteChart","import React, { FC, useState } from \"react\"\nimport { useDispatch } from \"react-redux\"\n\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Dialog from '@mui/material/Dialog';\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\nimport Typography from '@mui/material/Typography';\nimport Link from '@mui/material/Link'\nimport QuoteChart from './chart'\nimport { Quote } from \"../api/blueQuote\";\nimport { actions } from '../store/blueQuote/actions';\n\nconst RANGES = {\n  \"1 hour\": 60,\n  \"1 day\": 1440,\n  \"1 week\": 10080,\n  \"1 month\": 43200\n}\n\nconst BehaviorModal: FC<{\n  open: boolean,\n  onClose: any,\n  quotes: Omit<Quote, \"source\">[],\n  source: string\n}> =\n  ({ open, onClose, quotes, source }) => {\n  const [timeRange, setTimeRange] = useState(\"1 hour\")\n  const dispatch = useDispatch()\n\n  const handleRange = (e: any, value: keyof typeof RANGES) => {\n    setTimeRange(value)\n    dispatch(actions.getQuotesBySource({source, minutesAway: RANGES[value]}))\n  }\n\n  return (\n    <Dialog \n      open={open}\n      onClose={onClose}\n    >\n      <Card sx={{minWidth: 500}}>\n        <CardContent>\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{mb: 2}}>\n            Source:\n            <Link href={source} style={{ paddingLeft: 4 }}>\n              {source && source.split(\"//\")[1].split(\"/\")[0]}\n            </Link>\n          </Typography>\n          <ToggleButtonGroup\n            value={timeRange}\n            size=\"small\"\n            exclusive\n            onChange={handleRange}\n          >\n            {Object.keys(RANGES).map(range => \n              <ToggleButton key={range} value={range} >\n                {range}\n              </ToggleButton>\n            )}\n          </ToggleButtonGroup>\n          <QuoteChart quotes={quotes} />\n        </CardContent>\n      </Card>\n    </Dialog>\n    \n  )\n}\n\nexport default BehaviorModal","import React, {useEffect, useState, useRef} from 'react'\nimport { useSelector, useDispatch } from \"react-redux\"\nimport CssBaseline from '@mui/material/CssBaseline'\nimport Container from '@mui/material/Container'\nimport Grid from '@mui/material/Grid'\nimport { actions as blueQuoteActions, selectors as blueQuoteSelectors } from './store/blueQuote';\nimport QuoteCard from './components/quoteCard'\nimport AverageBar from './components/averageBar'\nimport './App.css'\nimport BehaviorModal from './components/behaviorModal'\n\nfunction App() {\n  const quotes = useSelector(blueQuoteSelectors.quotes)\n  const average = useSelector(blueQuoteSelectors.average)\n  const slippage = useSelector(blueQuoteSelectors.slippage)\n  const dispatch = useDispatch()\n  let cancelInterval: any = useRef()\n\n  const [showModal, setShowModal] = useState(false)\n  const [chartSource, setChartSource] = useState(\"\")\n  const handleShowModal = (source: string) => {\n    setShowModal(true)\n    setChartSource(source)\n    clearInterval(cancelInterval.current)\n  }\n  const handleCloseModal = () => {\n    setShowModal(false)\n    cancelInterval.current = setUpInterval()\n  }\n\n  const refreshData = () => {\n    dispatch(blueQuoteActions.getQuotes())\n    dispatch(blueQuoteActions.getAverage())\n    dispatch(blueQuoteActions.getSlippage())\n  }\n  const setUpInterval = () => {\n    return setInterval(refreshData, 15000)\n  }\n\n  useEffect(() => {\n    refreshData()\n    cancelInterval.current = setUpInterval()\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Container maxWidth=\"md\">\n        <AverageBar average={average} />\n        <Grid container spacing={2}>\n          {quotes && Object.entries(quotes).map(\n            ([source, quotesBySource]) =>\n              <QuoteCard\n                key={source}\n                quote={\n                  {\n                    ...quotesBySource[quotesBySource.length - 1],\n                    source\n                  }\n                }\n                slippage={slippage[source]}\n                onShowBehavior={handleShowModal}\n              />\n          )}\n        </Grid>\n        <BehaviorModal\n          open={showModal}\n          onClose={handleCloseModal}\n          quotes={quotes[chartSource]}\n          source={chartSource}\n        />\n      </Container>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\nimport blueQuoteReducer from \"./blueQuote\"\n\nconst store = configureStore({\n  reducer: {\n    blueQuote: blueQuoteReducer\n  }\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type Dispatch = typeof store.dispatch\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}